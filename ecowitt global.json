{
  "scenarioTemplate": {
    "name": "Ecowitt глобальный",
    "desc": "Глобальный сценарий для интеграции с метеостанцией Ecowitt. Содержит инициализацию и функцию обновления данных для вызова из блочного сценария (по крону или кнопкой).\nV1.0\n@ramaximum ",
    "active": true,
    "onStart": true,
    "sync": false,
    "data": "// Названия виртуального устройства (аксессуара) и сервисов для получения данных от Ecowitt\r\n// Изменять можно, одновременно переименовывая устройство и сервисы\r\n\r\nconst ecowitt_Name = \"Ecowitt\"; // Название виртуального устройства для работы с Ecowitt\r\nconst ecowitt_IPAdress = \"IP адрес\"; //Название параметра с IP адресом метеостанции\r\nconst ecowitt_OutdoorTempName = \"На улице\"; // Название виртуального термометра для уличной температуры\r\nconst ecowitt_IndoorTempName = \"В доме\"; // Название виртуального термометра для домашней температуры\r\nconst ecowitt_OutdoorHumidityName = \"На улице\"; // Название виртуального датчика влажности для улицы\r\nconst ecowitt_IndoorHumidityName = \"В доме\"; // Название виртуального датчика влажности для дома\r\nconst ecowitt_RelPressureName = \"Относительное давление\"; // Название виртуального датчика для относительного давления\r\nconst ecowitt_AbsPressureName = \"Абсолютное давление\"; // Название виртуального датчика для абсолютного давления\r\nconst ecowitt_OutdoorLuxName = \"Освещенность\"; // Название виртуального датчика освещённости на улице\r\nconst ecowitt_OutdoorUVIName = \"UVI\"; // Название виртуального датчика для UVI\r\nconst ecowitt_WindDirectionName = \"Направление ветра\"; // Название виртуального сервиса для направления ветра\r\nconst ecowitt_RainName = \"Датчик дождя\"; // Название виртуального сервиса для датчика дождя\r\nconst ecowitt_OutdoorBatteryName = \"Метеостанция\"; // Название виртуального сервиса для батарейки внешнего модуля\r\nconst ecowitt_ThunderBatteryName = \"Грозоотметчик\"; // Название виртуального сервиса для батарейки грозоотметчика\r\n\r\n\r\n\r\n// Указатели на устройства, в которые надо класть данные\r\nvar ecowitt_Device;\r\nvar ecowitt_OutdoorTemp;\r\nvar ecowitt_IndoorTemp;\r\nvar ecowitt_OutdoorHumidity;\r\nvar ecowitt_IndoorHumidity;\r\nvar ecowitt_RelPressure;\r\nvar ecowitt_AbsPressure;\r\nvar ecowitt_OutdoorLux;\r\nvar ecowitt_OutdoorUVI;\r\nvar ecowitt_WindDirection;\r\nvar ecowitt_Rain;\r\nvar ecowitt_OutdoorBattery;\r\nvar ecowitt_ThunderBattery;\r\n\r\n// Ищем виртуальное устройство для работы с Ecowitt и запоминаем для дальнейшего использования.\r\n{\r\n let ecowitt_list = []; // Список найденных в хабе виртуальных устройств для работы с Ecowitt\r\n log.info(\"Ищем виртуальное устройство\");\r\n Hub.getAccessories().forEach( function(_a) \r\n  {\r\n    if (_a.getName() === ecowitt_Name && _a.getModel()===\"Virtual\") ecowitt_list.push(_a);   \r\n  });\r\n if (ecowitt_list.length>1) log.warn(\"Более одного устройства Ecowitt. Работать будем только с первым\");\r\n if (ecowitt_list.length<1) \r\n  {\r\n    log.error(\"Не найдено виртуальное устройство \" + ecowitt_Name);\r\n    process.exit;\r\n  }\r\n else\r\n {\r\n  ecowitt_Device = ecowitt_list[0];\r\n  log.info(\"Найдено устройство \"+ ecowitt_Device.getName());\r\n }\r\n}\r\n\r\n// Проверим, что существует параметр с IP адресом\r\nif (!!ecowitt_Device.getService(HS.C_Option).getCharacteristic(HC.C_String)\r\n    && ecowitt_Device.getService(HS.C_Option).getName() === ecowitt_IPAdress)\r\n  log.info(\"Адрес метеостанции \"+ ecowitt_Device.getService(HS.C_Option).getCharacteristic(HC.C_String).getValue());\r\nelse\r\n{\r\n  log.error(\"На устройстве отсутствует параметр с IP адресом\");\r\n  process.exit;\r\n}\r\n\r\n// Ищем и запоминаем сервисы на виртуальном устройстве для заполнения данными из Ecowitt\r\n// 1) уличная температура\r\n{\r\n  let ecowittTemp_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_OutdoorTempName) && (_a.getType() === HS.TemperatureSensor)) ecowittTemp_list.push(_a);\r\n  });\r\n if (ecowittTemp_list.length>1) log.warn(\"Более одного уличного термометра. Работать будем только с первым\");\r\n if (ecowittTemp_list.length<1)\r\n  log.warn(\"Не найден термометр \"+ ecowitt_OutdoorTempName);\r\n else\r\n  ecowitt_OutdoorTemp = ecowittTemp_list[0];\r\n}\r\n\r\n// 2) комнатная температура\r\n{\r\n  let ecowittTemp_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_IndoorTempName) && (_a.getType() === HS.TemperatureSensor)) ecowittTemp_list.push(_a);\r\n  });\r\n if (ecowittTemp_list.length>1) log.warn(\"Более одного комнатного термометра. Работать будем только с первым\");\r\n if (ecowittTemp_list.length<1)\r\n  log.warn(\"Не найден термометр \"+ ecowitt_IndoorTempName);\r\n else\r\n  ecowitt_IndoorTemp = ecowittTemp_list[0];\r\n}\r\n\r\n// 3) уличная влажность\r\n{\r\n  let ecowittHumidity_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_OutdoorHumidityName) && (_a.getType() === HS.HumiditySensor)) ecowittHumidity_list.push(_a);\r\n  });\r\n if (ecowittHumidity_list.length>1) log.warn(\"Более одного уличного гигрометра. Работать будем только с первым\");\r\n if (ecowittHumidity_list.length<1)\r\n  log.warn(\"Не найден гигрометр \"+ ecowitt_OutdoorHumidityName);\r\n else\r\n  ecowitt_OutdoorHumidity = ecowittHumidity_list[0];\r\n}\r\n\r\n// 4) комнатная влажность\r\n{\r\n  let ecowittHumidity_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_IndoorHumidityName) && (_a.getType() === HS.HumiditySensor)) ecowittHumidity_list.push(_a);\r\n  });\r\n if (ecowittHumidity_list.length>1) log.warn(\"Более одного комнатного гигрометра. Работать будем только с первым\");\r\n if (ecowittHumidity_list.length<1)\r\n  log.warn(\"Не найден гигрометр \"+ ecowitt_IndoorHumidityName);\r\n else\r\n  ecowitt_IndoorHumidity = ecowittHumidity_list[0];\r\n}\r\n\r\n// 5) Относительное давление\r\n{\r\n  let ecowittPressure_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_RelPressureName) && (_a.getType() === HS.C_AtmosphericPressureSensor)) ecowittPressure_list.push(_a);\r\n  });\r\n if (ecowittPressure_list.length>1) log.warn(\"Более одного барометра (относит). Работать будем только с первым\");\r\n if (ecowittPressure_list.length<1)\r\n    log.warn(\"Не найден барометр \"+ ecowitt_RelPressureName);\r\n else\r\n  ecowitt_RelPressure = ecowittPressure_list[0];\r\n}\r\n\r\n// 6) Абсолютное давление\r\n{\r\n  let ecowittPressure_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_AbsPressureName) && (_a.getType() === HS.C_AtmosphericPressureSensor)) ecowittPressure_list.push(_a);\r\n  });\r\n if (ecowittPressure_list.length>1) log.warn(\"Более одного барометра (абс). Работать будем только с первым\");\r\n if (ecowittPressure_list.length<1)\r\n    log.warn(\"Не найден барометр \"+ ecowitt_AbsPressureName);\r\n else\r\n  ecowitt_AbsPressure = ecowittPressure_list[0];\r\n}\r\n\r\n// 7) Уличная освещённость\r\n{\r\n  let ecowittLux_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_OutdoorLuxName) && (_a.getType() === HS.LightSensor)) ecowittLux_list.push(_a);\r\n  });\r\n  if (ecowittLux_list.length>1) log.warn(\"Более одного люксометра. Работать будем только с первым\");\r\n  if (ecowittLux_list.length<1)\r\n   log.warn(\"Не найден люксометр \"+ ecowitt_OutdoorLuxName);\r\n  else\r\n   ecowitt_OutdoorLux = ecowittLux_list[0];\r\n\r\n}\r\n\r\n// 8) UVI (индекс ультрафиолета)\r\n{\r\n  let ecowittLux_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_OutdoorUVIName) && (_a.getType() === HS.C_UltravioletSensor)) ecowittLux_list.push(_a);\r\n  });\r\n  if (ecowittLux_list.length>1) log.warn(\"Более одного UVI. Работать будем только с первым\");\r\n  if (ecowittLux_list.length<1)\r\n   log.warn(\"Не найден UVI \"+ ecowitt_OutdoorUVIName);\r\n  else\r\n   ecowitt_OutdoorUVI = ecowittLux_list[0];\r\n}\r\n\r\n// 9) Направление ветра\r\n{\r\n  let ecowittAngle_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_WindDirectionName) && (_a.getType() === HS.C_AngleMeter)) ecowittAngle_list.push(_a);\r\n  });\r\n  if (ecowittAngle_list.length>1) \r\n   log.warn(\"Более одного угломера. Работать будем только с первым\");\r\n  if (ecowittAngle_list.length<1)\r\n      log.warn(\"Не найден угломера \"+ ecowitt_WindDirectionName); \r\n  else\r\n   ecowitt_WindDirection = ecowittAngle_list[0];\r\n}\r\n\r\n// 10) датчик дождя\r\n {\r\n let ecowitt_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_RainName) && (_a.getType() === HS.LeakSensor)) ecowitt_list.push(_a);\r\n  });\r\n  if (ecowitt_list.length>1) \r\n   log.warn(\"Более одного датчика протечки. Работать будем только с первым\");\r\n  if (ecowitt_list.length<1)\r\n      log.warn(\"Не найден датчик протечки \"+ ecowitt_RainName); \r\n  else\r\n   ecowitt_Rain = ecowitt_list[0];\r\n }\r\n\r\n// 11) Батарейка в метеостанции\r\n {\r\n let ecowitt_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_OutdoorBatteryName)  && (_a.getType() === HS.BatteryService)) ecowitt_list.push(_a);\r\n  });\r\n  if (ecowitt_list.length>1) \r\n   log.warn(\"Более одной батарейки метеостанции. Работать будем только с первой\");\r\n  if (ecowitt_list.length<1)\r\n    log.warn(\"Не найдена батарейка \"+ ecowitt_OutdoorBatteryName); \r\n  else\r\n   ecowitt_OutdoorBattery = ecowitt_list[0];\r\n }\r\n\r\n// 12) Батарейка в грозоотметчике\r\n {\r\n  let ecowitt_list = [];\r\n  ecowitt_Device.getServices().forEach( function(_a) \r\n  {\r\n    if ((_a.getName() ===  ecowitt_ThunderBatteryName)   && (_a.getType() === HS.BatteryService)) ecowitt_list.push(_a);\r\n  });\r\n  if (ecowitt_list.length>1) \r\n   log.warn(\"Более одной батарейки грозоотметчика. Работать будем только с первой\");\r\n  if (ecowitt_list.length<1)\r\n    log.warn(\"Не найдена батарейка \"+ ecowitt_ThunderBatteryName); \r\n  else\r\n   ecowitt_ThunderBattery = ecowitt_list[0];\r\n }\r\n\r\n// Функция для вызова по крону из блочных сценариев (увы, из глобальных нельзя менять данные или создавать крон)\r\nfunction ecowitt_Update()\r\n{\r\n// Достаём IP адрес из параметров устройств. Делаем это каждый раз - чтобы можно было спокойно менять адрес \"на лету\"\r\n log.info(\"Начинаем обновление \"+ ecowitt_Device.getName());\r\n let IPAddress=ecowitt_Device.getService(HS.C_Option).getCharacteristic(HC.C_String).getValue();\r\n if (IPAddress === null || IPAddress === undefined) \r\n {\r\n  log.error (\"Не могу найти IP адрес для \"+ ecowitt_Name);\r\n  return;\r\n }\r\n\r\n// Запрашиваем данные с метеостанции и разбираем их\r\ntry \r\n{\r\nlet ecowitt_Response = HttpClient.GET(\"http://\"+ IPAddress + \"/get_livedata_info\").send().getBody();\r\nlet data2 = JSON.parse(ecowitt_Response);  \r\n\r\nfor (var i=0 ; i < data2.common_list.length ; i++)\r\n{\r\n  switch (data2.common_list[i].id) \r\n  {\r\n   case \"0x02\": //outdoor temperature\r\n   if (!!ecowitt_OutdoorTemp) \r\n    { \r\n     log.info (\"Обновляем уличную температуру\");\r\n     ecowitt_OutdoorTemp.getCharacteristic(HC.StatusActive).setValue(true);\r\n     ecowitt_OutdoorTemp.getCharacteristic(HC.CurrentTemperature).setValue(parseFloat(data2.common_list[i].val,10));\r\n    }\r\n   break; \r\n   case \"0x07\": //Outdoor Humidity (%)\r\n    if (!!ecowitt_OutdoorHumidity) \r\n     {\r\n      log.info (\"Обновляем уличную влажность\"); \r\n      ecowitt_OutdoorHumidity.getCharacteristic(HC.StatusActive).setValue(true);\r\n      ecowitt_OutdoorHumidity.getCharacteristic(HC.CurrentRelativeHumidity).setValue(parseFloat(data2.common_list[i].val,10));\r\n     }\r\n   break; \r\n   case \"0x15\": //Light (lux)\r\n     if (!!ecowitt_OutdoorLux) \r\n      { \r\n       log.info (\"Обновляем освещенность\");  \r\n       ecowitt_OutdoorLux.getCharacteristic(HC.StatusActive).setValue(true);\r\n       // Ecowitt возвращает освещённость в килоЛюксах, поэтому умножаем на 1000\r\n       ecowitt_OutdoorLux.getCharacteristic(HC.CurrentAmbientLightLevel).setValue( 1000 * parseFloat(data2.common_list[i].val,10));\r\n      }\r\n   break; \r\n   case \"0x17\": //UVI (0-15 index) \r\n    if (!!ecowitt_OutdoorUVI)\r\n    {\r\n     log.info (\"Обновляем UVI\"); \r\n     ecowitt_OutdoorUVI.getCharacteristic(HC.C_CurrentUltraviolet).setValue(parseInt(data2.common_list[i].val,10)); \r\n    }\r\n   break; \r\n   case \"0x0A\": //Wind Direction (360°)\r\n    if (!!ecowitt_WindDirection)\r\n    {\r\n     log.info(\"Обновляем направление ветра\");\r\n     ecowitt_WindDirection.getCharacteristic(HC.C_Angle).setValue(parseInt(data2.common_list[i].val,10)); \r\n    }\r\n   break; \r\n  }  \r\n}\r\nfor (var i=0 ; i < data2.piezoRain.length ; i++)\r\n{\r\n  switch (data2.piezoRain[i].id) \r\n  {\r\n   case \"srain_piezo\": //Raining(Y/N)\r\n    if (!!ecowitt_Rain) \r\n    { \r\n      ecowitt_Rain.getCharacteristic(HC.StatusActive).setValue(true);\r\n      ecowitt_Rain.getCharacteristic(HC.LeakDetected).setValue(parseInt(data2.piezoRain[i].val));\r\n    } \r\n   break; \r\n   case \"0x13\":  //battery\r\n    if (!!ecowitt_OutdoorBattery)\r\n    {\r\n      log.info(\"Обновляем батарейку метеостанции\");\r\n     // Ecowitt возвращает статус батарейки от 1 до 5. Чтобы перейти к %, умножаем на 20\r\n     ecowitt_OutdoorBattery.getCharacteristic(HC.BatteryLevel).setValue(20 * parseInt(data2.piezoRain[i].battery,10));\r\n\r\n     // считаем, что низкий заряд - это меньше 40% (или меньше 2 в терминах Ecowitt)\r\n     ecowitt_OutdoorBattery.getCharacteristic(HC.StatusLowBattery).setValue(parseInt(data2.piezoRain[i].battery,10)<2);\r\n    }\r\n    // Одновременно обновляем статус низкого заряда у других уличных сервисов (которые это умеют)\r\n    if (!!ecowitt_OutdoorTemp) ecowitt_OutdoorTemp.getCharacteristic(HC.StatusLowBattery).setValue(parseInt(data2.piezoRain[i].battery,10)<2);\r\n    if (!!ecowitt_OutdoorHumidity) ecowitt_OutdoorHumidity.getCharacteristic(HC.StatusLowBattery).setValue(parseInt(data2.piezoRain[i].battery,10)<2);\r\n    if (!!ecowitt_OutdoorLux) ecowitt_OutdoorLux.getCharacteristic(HC.StatusLowBattery).setValue(parseInt(data2.piezoRain[i].battery,10)<2);\r\n    if (!!ecowitt_Rain) ecowitt_Rain.getCharacteristic(HC.StatusLowBattery).setValue(parseInt(data2.piezoRain[i].battery,10)<2);\r\n   break; \r\n   case \"0x0D\": //Rain Event (mm)\r\n      log.info(\"Дождь: \"+ parseFloat(data2.piezoRain[i].val,10));    \r\n   break; \r\n  }  \r\n}\r\n// данные от комнатного модуля\r\nif (!!ecowitt_IndoorTemp) \r\n{\r\n  if (data2.wh25[0].intemp !=null)\r\n  {\r\n   log.info(\"Обновляем комнатную температуру\");\r\n   ecowitt_IndoorTemp.getCharacteristic(HC.StatusActive).setValue(true);\r\n   ecowitt_IndoorTemp.getCharacteristic(HC.CurrentTemperature).setValue(parseFloat(data2.wh25[0].intemp,10));\r\n  }\r\n  else \r\n   ecowitt_IndoorTemp.getCharacteristic(HC.StatusActive).setValue(false);\r\n} \r\nif (!!ecowitt_IndoorHumidity) \r\n{\r\n  if (data2.wh25[0].inhumi != null)\r\n  {\r\n   log.info(\"Обновляем комнатную влажность\");\r\n   ecowitt_IndoorHumidity.getCharacteristic(HC.StatusActive).setValue(true);\r\n   ecowitt_IndoorHumidity.getCharacteristic(HC.CurrentRelativeHumidity).setValue(parseFloat(data2.wh25[0].inhumi,10));\r\n  }\r\n  else\r\n   ecowitt_IndoorHumidity.getCharacteristic(HC.StatusActive).setValue(false);\r\n}\r\nif (!!ecowitt_RelPressure && data2.wh25[0].rel != null) \r\n {\r\n   log.info (\"Обновляем относительное давление\");\r\n   ecowitt_RelPressure.getCharacteristic(HC.C_CurrentAtmosphericPressure).setValue(parseFloat(data2.wh25[0].rel,10));\r\n } \r\nif (!!ecowitt_AbsPressure && data2.wh25[0].abs != null) \r\n {\r\n   log.info(\"Обновляем абсолютное давление\");\r\n   ecowitt_AbsPressure.getCharacteristic(HC.C_CurrentAtmosphericPressure).setValue(parseFloat(data2.wh25[0].abs,10));\r\n }\r\n\r\n// данные от грозоотметчика\r\n if (!!ecowitt_ThunderBattery && data2.lightning[0].battery != null)\r\n {\r\n  log.info (\"Обновляем батарейку грозоотметчика\");\r\n  // Ecowitt возвращает статус батарейки от 1 до 5. Чтобы перейти к %, умножаем на 20 \r\n  ecowitt_ThunderBattery.getCharacteristic(HC.BatteryLevel).setValue(20 * parseInt(data2.lightning[0].battery,10));\r\n  // считаем, что низкий заряд - это меньше 40% (или меньше 2 в терминах Ecowitt)\r\n  ecowitt_ThunderBattery.getCharacteristic(HC.StatusLowBattery).setValue(parseInt(data2.lightning[0].battery,10)<2);\r\n }\r\n}\r\ncatch(E)\r\n{\r\n  log.error(\"Не удалось обновить данные с \"+ ecowitt_Name + E);\r\n\r\n  // Раз обновиться не получилось, делаем все сервисы неактивными (тех, кто такое умеют)\r\n  if (!!ecowitt_OutdoorTemp) ecowitt_OutdoorTemp.getCharacteristic(HC.StatusActive).setValue(false);\r\n  if (!!ecowitt_IndoorTemp) ecowitt_IndoorTemp.getCharacteristic(HC.StatusActive).setValue(false);\r\n  if (!!ecowitt_OutdoorHumidity) ecowitt_OutdoorHumidity.getCharacteristic(HC.StatusActive).setValue(false);\r\n  if (!!ecowitt_IndoorHumidity) ecowitt_IndoorHumidity.getCharacteristic(HC.StatusActive).setValue(false);\r\n  if (!!ecowitt_OutdoorLux) ecowitt_OutdoorLux.getCharacteristic(HC.StatusActive).setValue(false);\r\n  if (!!ecowitt_Rain) ecowitt_Rain.getCharacteristic(HC.StatusActive).setValue(false);\r\n}\r\nfinally\r\n{\r\n  log.info(\"Закончили обновление \"+ ecowitt_Device.getName());\r\n}\r\n}",
    "type": "GLOBAL"
  }
}